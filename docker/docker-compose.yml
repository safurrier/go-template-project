version: "3.9"

services:
  # CLI application (for testing)
  cli:
    build:
      context: ..
      target: cli
    image: go-template-project:cli
    volumes:
      - ..:/app:ro
    environment:
      - DEBUG=true
    profiles:
      - cli

  # HTTP Server
  server:
    build:
      context: ..
      target: server
    image: go-template-project:server
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - HOST=0.0.0.0
      - DEBUG=true
      - DATABASE_URL=postgres://app:development@postgres:5432/appdb
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Background Worker
  worker:
    build:
      context: ..
      target: worker
    image: go-template-project:worker
    environment:
      - DEBUG=true
      - DATABASE_URL=postgres://app:development@postgres:5432/appdb
    depends_on:
      - postgres
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: app
      POSTGRES_PASSWORD: development
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d appdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    profiles:
      - redis

volumes:
  postgres_data:
  redis_data: