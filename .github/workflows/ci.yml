name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.22', '1.23']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Install dependencies
      run: go mod download

    - name: Install tools
      run: make setup

    - name: Format check
      run: |
        make fmt
        if [ -n "$(git status --porcelain)" ]; then
          echo "Code is not formatted. Please run 'make fmt'"
          git diff
          exit 1
        fi

    - name: Vet
      run: make vet

    - name: Lint
      run: make lint

    - name: Test
      run: make test

    - name: Coverage check
      run: make coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: coverage.out
        fail_ci_if_error: false
        verbose: true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        cache: true

    - name: Build all binaries
      run: make build

    - name: Test CLI binary
      run: |
        ./bin/cli --version
        ./bin/cli || true

    - name: Cross-platform build
      run: make build-all

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ github.sha }}
        path: dist/
        retention-days: 7

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build CLI image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: cli
        tags: go-template-project:cli-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build server image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: server
        tags: go-template-project:server-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test server image
      run: |
        docker run --rm -d --name test-server -p 8080:8080 go-template-project:server-${{ github.sha }}
        sleep 5
        curl -f http://localhost:8080/health || exit 1
        docker stop test-server

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        cache: true

    - name: Run integration tests
      run: make test-integration
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/testdb?sslmode=disable

    - name: Run smoke tests
      run: make test-smoke

    - name: Run E2E tests
      run: make test-e2e